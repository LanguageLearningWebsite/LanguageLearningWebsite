<button onclick="startRecording(this);">record</button>
<button onclick="stopRecording(this);" disabled>stop</button>

<h2><%= recording_list %> Recordings</h2>
<ul id="recordingslist"></ul>

<style type='text/css'>
  ul { list-style: none; }
  #recordingslist audio { display: block; margin-bottom: 10px; }
  #recordingslist button { display: block; margin-bottom: 10px; }
</style>

<script type="text/javascript">
  var audio_context;
  var recorder;

  function startUserMedia(stream) {
    var input = audio_context.createMediaStreamSource(stream);
    recorder = new Recorder(input);

  }

  function startRecording(button) {
    recorder && recorder.record();
    button.disabled = true;
    button.nextElementSibling.disabled = false;
  }

  function stopRecording(button) {
    recorder && recorder.stop();
    button.disabled = true;
    button.previousElementSibling.disabled = false;
    // create WAV download link using audio data blob
    createDownloadLink();
    recorder.clear();
  }

  function createDownloadLink() {
    recorder && recorder.exportWAV(function(blob) {
      var url = URL.createObjectURL(blob);
      var li = document.createElement('li');
      var au = document.createElement('audio');
      var hf = document.createElement('a');
      var up = document.createElement('button');

      au.controls = true;
      au.src = url;
      hf.href = url;
      hf.download = new Date().toISOString() + '.wav';
      hf.innerHTML = hf.download;
      up.innerHTML = "Upload";
      var base_url = '<%= raw @s3_base_url %>';
      $.ajax({
        url: "/api/v1/aws_presigned_url?",
        type: "GET",
        async: true,
        crossDomain: true,
        dataType: "json",
        data: {"base_url" : base_url,
              "file_name" : hf.download,
              "user": '<%= user.id %>',
              "recording_list": '<%= recording_list %>'},
        success: function(data) {
          up.addEventListener("click", function() {
            $.ajax({
              type: 'PUT',
              url: data['url'],
              crossDomain: true,
              data: blob,
              contentType: blob.type,
              processData: false
            });
          });
        }
      });
      li.appendChild(au);
      li.appendChild(hf);
      li.appendChild(up);
      document.getElementById("recordingslist").appendChild(li);
    });
  }

  $(document).on('turbolinks:load', function init() {
    console.log('<%= recording_list %>');
    try {
      // webkit shim
      window.AudioContext = window.AudioContext || window.webkitAudioContext;
      navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
      window.URL = window.URL || window.webkitURL;

      audio_context = new AudioContext;
      console.log('Audio context set up.');
      console.log('navigator.getUserMedia ' + (navigator.getUserMedia ? 'available.' : 'not present!'));
    } catch (e) {
      alert('No web audio support in this browser!');
    }

    navigator.getUserMedia({audio: true}, startUserMedia, function(e) {
      console.log('No live audio input: ' + e);
    });
  });
</script>
