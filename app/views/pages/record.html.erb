<body style="text-align: center">

<div class="col-10 offset-1" style="padding: 50px 20px">
<div class="card text-center">
  <div class="card-header">
    recording
  </div>
  <div class="card-block">
    <h1 class="card-title">Let's Chat</h1>
  </br>
    <p class="card-text">Make sure you are using a recent version of Google Chrome. <br> Also before you enable microphone input either plug in headphones or <br>  turn the volume down if you want to avoid ear splitting feedback!</p>
    <button onclick="startRecording(this);" class="btn btn-success">Record</button>
    <button onclick="stopRecording(this);" class="btn btn-danger" disabled>Stop</button>
  </br>
    <button id="button"; class="btn btn-success" style="margin-top: 20px" disabled>upload</button>

  </br>
    <ul id="recordingslist"></ul>
    <pre id="log"></pre>
    <style type='text/css'>
      ul { list-style: none; }
      #recordingslist audio { display: block; text-align: center; margin: 50px 40px; }
      #recordingslist button { display: block; margin: 30px 30px;}
    </style>
  </div>
  <div class="card-footer text-muted">
    2 days ago
  </div>
</div>
</div>
</body>



<script type="text/javascript">
  function __log(e, data) {
    log.innerHTML += "\n" + e + " " + (data || '');
  }

  var audio_context;
  var recorder;

  function startUserMedia(stream) {
    var input = audio_context.createMediaStreamSource(stream);
    __log('Media stream created.');

    // Uncomment if you want the audio to feedback directly
    //input.connect(audio_context.destination);
    //__log('Input connected to audio context destination.');

    recorder = new Recorder(input);
    __log('Recorder initialised.');
  }

  function startRecording(button) {
    recorder && recorder.record();
    button.disabled = true;
    button.nextElementSibling.disabled = false;
    __log('Recording...');
  }

  function stopRecording(button) {
    recorder && recorder.stop();
    button.disabled = true;
    button.previousElementSibling.disabled = false;
    __log('Stopped recording.');

    // create WAV download link using audio data blob
    createDownloadLink();

    recorder.clear();
  }

  function createDownloadLink() {
    recorder && recorder.exportWAV(function(blob) {
      var url = URL.createObjectURL(blob);
      var li = document.createElement('li');
      var au = document.createElement('audio');
      var hf = document.createElement('a');
      var up = document.getElementById('button');

      up.disabled = false;

      au.style.margin = "auto";
      au.style.paddingTop = "60px";
      up.style.margin = "auto";

      console.log(blob.type);

      au.controls = true;
      au.src = url;
      hf.href = url;
      hf.download = new Date().toISOString() + '.wav';
      hf.innerHTML = hf.download;
      up.innerHTML = "Upload";
      var base_url = '<%= raw @s3_base_url %>';
      console.log(base_url);
      $.ajax({
        url: "/api/v1/aws_presigned_url?",
        type: "GET",
        async: true,
        crossDomain: true,
        dataType: "json",
        data: {"base_url" : base_url,
              "file_name" : hf.download},
        success: function(data) {
          up.addEventListener("click", function() {
            $.ajax({
              type: 'PUT',
              url: data['url'],
              crossDomain: true,
              data: blob,
              contentType: blob.type,
              processData: false
            });
          });
        }
      });
      li.appendChild(au);
      li.appendChild(hf);
      li.appendChild(up);
      recordingslist.appendChild(li);
    });
  }
  $(document).on('turbolinks:load', function init() {
    try {
      // webkit shim
      window.AudioContext = window.AudioContext || window.webkitAudioContext;
      navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
      window.URL = window.URL || window.webkitURL;

      audio_context = new AudioContext;
      __log('Audio context set up.');
      __log('navigator.getUserMedia ' + (navigator.getUserMedia ? 'available.' : 'not present!'));
    } catch (e) {
      alert('No web audio support in this browser!');
    }

    navigator.getUserMedia({audio: true}, startUserMedia, function(e) {
      __log('No live audio input: ' + e);
    });
  });
</script>
